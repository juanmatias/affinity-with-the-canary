---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "affinit-with-the-canary.fullname" . }}-config
data:
  liveness.conf: |
    server {

      # Enable logging if needed
      # error_log    /var/log/nginx/liveness.error.log debug;

      # The IP that you forwarded in your router (nginx proxy)
      listen  6969 default_server;

      # Make site accessible from http://localhost/
      server_name _;
      location /liveness {
        return 204 'livenessProbe gangnam style!';
        # because default content-type is application/octet-stream,
        # browser will offer to "save the file"...
        # if you want to see reply in browser, uncomment next line
        # add_header Content-Type text/plain;
      }
      location /readiness {
        # Turn on nginx stats
        stub_status on;

        # I do not need logs for stats
        access_log   off;

        # return 204 'readinessProbe gangnam style!';
        # because default content-type is application/octet-stream,
        # browser will offer to "save the file"...
        # if you want to see reply in browser, uncomment next line
        # add_header Content-Type text/plain;
      }

    }
  default.conf: |
    # SERVICE DEFINITION
    # ##################

      server {

        # Enable logging if needed
        # error_log    /var/log/nginx/default.error.log debug;

        # Set DNS resolver for K8s cluster (change if needed)
        resolver kube-dns.kube-system.svc.cluster.local;

        # The IP that you forwarded in your router (nginx proxy)
        listen  80 default_server;

        # Make site accessible from http://localhost/
        server_name _;


        # Location to work with (aka path asked to server)
       location / {

            # set the base service url and svc names
            # Base url (e.g. ".canary.svc.cluster.local") is composed by namespace (canary) and cluster svc address. You later must prepend svc name.
            set $base_url "";
            set_by_lua $base_url 'return os.getenv("BASE_SVC_URL")';
            set $canary_svc_name "";
            set_by_lua $canary_svc_name 'return os.getenv("CANARY_SVC_NAME")';
            set $stable_svc_name "";
            set_by_lua $stable_svc_name 'return os.getenv("STABLE_SVC_NAME")';
            set $canary_svc_port "";
            set_by_lua $canary_svc_port 'return os.getenv("CANARY_SVC_PORT")';
            set $stable_svc_port "";
            set_by_lua $stable_svc_port 'return os.getenv("STABLE_SVC_PORT")';
            set $cookie_max_age "";
            set_by_lua $cookie_max_age 'return os.getenv("COOKIE_MAX_AGE")';
            set $cookie_name "";
            set_by_lua $cookie_name 'return os.getenv("COOKIE_NAME")';
            set $cookie_enabled "";
            set_by_lua $cookie_enabled 'return os.getenv("COOKIE_ENABLED")';
            set $upstream_srv "";

           # I think I saw a kitten, said the canary
           # This block will rewerite upstream_srv var to stable or canary on the following rules:
             # if cookie is set honor it and set what is set in it
             # if no cookie then randomize access according to the weight that has been set
           # Cookies is set with a max-age of 2 days (172800 seconds)
           rewrite_by_lua_block {
             local weight = tonumber(os.getenv("CANARY_WEIGHT"))
             local upstream_srv = ngx.var.stable_svc_name .. ngx.var.base_url
             local environ = ""
             local cookie_name = "cookie_" .. ngx.var.cookie_name
             if(weight > 0)
             then
               if(ngx.var.cookie_enabled == "true" and ngx.var[cookie_name])
               then
                 environ = ngx.var[cookie_name]
               else
                 local myrand = math.random()
                 if(myrand <= weight)
                 then
                   environ = "canary"
                 else
                   environ = "stable"
                 end
               end

               if(environ == "canary")
               then
                 upstream_srv = ngx.var.canary_svc_name .. ngx.var.base_url .. ":" .. ngx.var.canary_svc_port
               else
                 upstream_srv = ngx.var.stable_svc_name .. ngx.var.base_url .. ":" .. ngx.var.stable_svc_port
               end
             else
               upstream_srv = ngx.var.stable_svc_name .. ngx.var.base_url .. ":" .. ngx.var.stable_svc_port
               environ = "stable"
             end

             ngx.var.upstream_srv = upstream_srv
             if(ngx.var.cookie_enabled == "true")
             then
              ngx.header['Set-Cookie'] = ngx.var.cookie_name .. "=" .. environ .. ";Path=/;Max-Age=" .. ngx.var.cookie_max_age
             end
           }

           # July! Do the thing!
           proxy_pass_header Authorization;
           proxy_pass http://$upstream_srv;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_http_version 1.1;
           proxy_set_header Connection "";
           proxy_buffering off;
           client_max_body_size 0;
           proxy_read_timeout 36000s;
           proxy_redirect off;

       }
      }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "affinit-with-the-canary.fullname" . }}-mainconfig
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    env BASE_SVC_URL;
    env CANARY_SVC_NAME;
    env STABLE_SVC_NAME;
    env CANARY_SVC_PORT;
    env STABLE_SVC_PORT;
    env CANARY_WEIGHT;
    env COOKIE_MAX_AGE;
    env COOKIE_NAME;
    env COOKIE_ENABLED;

    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

{{if .Values.logging.custom}}
        {{.Values.logging.customFormat}}
{{else}}
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
{{end}}

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;

        include /etc/nginx/conf.d/*.conf;
    }
